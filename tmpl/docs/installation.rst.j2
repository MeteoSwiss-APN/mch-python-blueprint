.. highlight:: shell

============
Installation
============

There are two installation types, production (prod) and development (dev; is editable).

Preparation
-----------
To install {{ project_name }} you need a miniconda installation. You can either setup your miniconda installation manually or use the script `setup_miniconda.sh`, which will download and install the latest version of miniconda.


Installation of dependencies
----------------------------

Dependencies are handled by the conda package manager. The goal of this step is to set up a conda environment according to the requirements of {{ project_name }}. Note that the development installation has some additional dependencies as it includes linters and other development tools. The direct dependencies are handled in YAML requirements files. Unpinned installations are based on the `requirements/requirements.yml` and `requirements/dev-requirements.yml` files, where the first-level dependencies of the package are listed. Pinned installations are based on exported environments and stored in the files `requirements/environment.yml` and `requirements/dev-environment.yml`. In total, four possible installation options are possible (pinned/unpinned x prod/dev). These options are covered in the script `setup_env.sh`. The optional flags `-d` and `-u` stand for dev and unpinned installation respectively. E.g., for an unpinned dev installation type:

.. code-block:: console

    $ bash setup_env.sh -d -u

You can control the environment name with the flag `-n` and the python version with `-v`. As defaults the script will use {{ project_slug }} and Python 3.10, respectively.


Installation of {{ project_name }}
-----------------------------------------------

Again, there are two options for the installation type, production and (editable) development installation. After installing the dependencies with conda, from the root folder of {{ project_slug }} type

.. code-block:: console

    $ conda activate {{ project_slug }}
    $ pip install . --no-deps

For a production installation and

.. code-block:: console

    $ conda activate {{ project_slug }}
    $ pip install . --editable --no-deps

for a development installation.


Maintenance of the environment (for developers)
-----------------------------------------------

If you need to add new first-level dependencies to your package, make sure to include them in `requirements/requirements.yml` or `requirements/dev-requirements.yml` in case they are used for development only. Don't constrain the version number more than necessary; a minimum minor version (e.g., `>=3.9`) to ensure feature availability is usually a good approach. Note that pip requirements can be added to these files under `- pip:` in the `dependencies:` section of the document. After a (unpinned!) installation, this will change the full dependency tree and you need to export the environment(s). In order to update both the production and the development environments, run

.. code-block:: console
    $ bash setup_env.sh -e

for a production environment and

.. code-block:: console
    $ bash setup_env.sh -ed

for a development environment, where `-e` means export the environment to `requirements/environment.yml` and `requirements/dev-environment.yml`, respectively.


Interaction with Jenkins
------------------------

All four possible installation options (pinned/unpinned x prod/dev) are tested by jenkins on regular builds and upon merging pull requests to the master branch.

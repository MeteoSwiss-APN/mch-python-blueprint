.. highlight:: shell

============
Installation
============

 There are two installation types, a productive (binary) installation and a development (source) installation which is editable.

Preparation
-----------
To install {{ project_name }} you need a miniconda installation. You can either setup your miniconda installation manually or use the script `setup_miniconda.sh`, which will download and install the latest version of miniconda.


Installation of dependencies
----------------------------
Dependencies are handled by the conda package manager. The goal of this step is to set up a conda environment according to the requirements of {{ project_name }}. Note that by design, there are some dependencies already when you start developing the package, as the environment includes linters and other development tools. The dependencies are handled in requirement files. Free installations are based on the `requirements/requirements.yml` file, where the first-level dependencies of the package are listed. Pinned installations are based on exported environments and stored in the file `requirements/environment.yml`.yml`. Unpinned/ pinned installations are covered in the script `setup_env.sh`. The optional flag `-u` stands for unpinned installation:

.. code-block:: console

    $ bash setup_env.sh -u

You can control the environment name with the flag `-n` and the python version with `-v`. Execute :code:`./setup_env -h` for available options and defaults.


Installation of {{ project_name }}
-----------------------------------------------

There are two options for installation, binary production installations and development (source) installations which are editable. Go to the root folder of {{ project_slug }}. Then type

.. code-block:: console

    $ conda activate {{ project_slug }}
    $ pip install --no-deps .

For a production installation and

.. code-block:: console

    $ conda activate {{ project_slug }}
    $ pip install --no-deps --editable .

for a development (editable) installation.


Maintenance of the environment (for developers)
-----------------------------------------------


If you need to add new first-level dependencies to your package, make sure to include them in `requirements/requirements.yml`. Note that pip requirements can be added to these files in the `pip:` section of the document. After a (free!) installation, this will change the full dependency tree and you need to export the environment. You can either do this by hand by activating the environment and then running
.. code-block:: console

    $ conda env export {{ project_slug }} requirements/environment.yml

or you can reinstall with the setup script from `requirements/requirements.yml` and directly export the environment with the `-e` flag.

.. code-block:: console

    $ ./setup_env -ue


Interaction with Jenkins and Github actions
-------------------------------------------

Your package is always built on a Github actions server upon committing to the main branch. If your code goes into production,
pinned, non-editable (production) installations must be tested with Jenkins on CSCS machines. Templates may be found in the jenkins/
folder. Contact DevOps to help you set up your pipeline.
